/*
 *  Copyright 2018-2020 Laika, LLC. Authored by Mitch Prater.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
/*
    Duplicate material displacement only.
 */
#include "ikaConstants.h"
#include "material/v2_Displacement.h"
#include "material/v2_PxrSurface.h"

shader v2_Displacement
[[
    int rfm_nodeid = 1234002,
    string rfm_classification = "rendernode/RenderMan/pattern/material",
    string help = 
        "Creates a <strong>Material</strong> layer that has only <strong>Displacement.</strong> "
        "<br/><br/>"
        "Note: <strong>Displacements</strong> will affect other <strong>Material</strong> "
        "layer displacements based on their layer order, <strong>Thickness,</strong> "
        "and <strong>Mask</strong> values. "
]]
(
    string Notes = ""
    [[
        int connectable = 0,
        string help = 
            "Creates a <strong>Material</strong> layer that has only <strong>Displacement.</strong> "
            "<br/><br/>"
            "Note: <strong>Displacements</strong> will affect other <strong>Material</strong> "
            "layer displacements based on their layer order, <strong>Thickness,</strong> "
            "and <strong>Mask</strong> values. "
            "<br/><br/>"
    ]],

    /*
     *  The Input Material data set.
     *
     *  This consists of a vstruct parameter, a material struct parameter, and a set
     *  of enable parameters for each response. The material struct and response enable
     *  parameters are members of the vstruct parameter.
     */
    // The vstruct parameter. This is the single material connection point
    // for all the material parameters in the material struct.
    PXRSURFACE_MATERIAL_VSTRUCT( MaterialInput, Material Input,
            The connected <strong>Material Input</strong> layers OVER this one:
            connect a PxrSurface <strong>Material Output</strong> here to
            layer it OVER this material.
            ),

    // The material struct parameter.
    PXRSURFACE_MATERIAL_STRUCT( MaterialInput, MatIn ),

    // The response Enable parameters. These are linked to a vstructmember of the vstruct parameter.
    ALL_ENABLE_PARAMS( MaterialInput, ClearCoat ),
    ALL_ENABLE_PARAMS( MaterialInput, PrimarySpecular ),
    ALL_ENABLE_PARAMS( MaterialInput, SecondarySpecular ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Iridescence ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Iridescence ),
    ANISOTROPYDIRECTION_ENABLE_PARAM( MaterialInput, Iridescence ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Fuzz ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Fuzz ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Diffuse ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Diffuse ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Scatter ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Subsurface ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Glass ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Glass ),
    ANISOTROPYDIRECTION_ENABLE_PARAM( MaterialInput, Glass ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Glow ),

    /*
     *  This material's user interface parameters.
     */
    int Enable = 1
    [[
        int connectable = 0,
        string label = "Enable",
        string widget = "checkBox",
        string help =
            "Turns the computation of this Displacement On/Off. "
    ]],

    float Mask = 1.0
    [[
        string label = "Mask",
        int slider = 1, float slidermin = 0.0, float slidermax = 1.0,
        string help =
            "This material <strong>Mask</strong> (a.k.a. Opacity, Alpha, Matte, Presence, etc.) "
            "determines the distribution of this material layer: where it is versus where it isn't. "
            "Specifically, it controls the blend between this material and the material "
            "composited UNDER it. "
    ]],

    //
    //  Displacement parameters start here.
    //
    float Displacement_Thickness = 0.0
    [[
        string page = "Displacement",
        string label = "Thickness",
        int slider = 1, float slidermin = 0.0, float slidermax = 1.0,
        string help =
            "<strong>Thickness</strong> determines the degree to which this material will "
            "cover over the displacement of the underlying material (the one connected to "
            "<strong>Material Output</strong>). "
            "<br/><br/>"
            "When 0, this material has no thickness, so it will be applied directly "
            "to, and exactly follow, the underlying material's displaced surface. "
            "<br/><br/>"
            "When 1, this material is completely 'thick', so it will be applied to the underlying "
            "material's smooth <strong>Covering Height</strong> surface. "
    ]],

    float Displacement_BumpPercent = 1.0
    [[
        string page = "Displacement",
        string label = "Bump Percent",
        int slider = 1, float slidermin = 0.0, float slidermax = 2.0,
        string help =
            "How much of the displaced surface normal is used in shading? "
            "<br/><br/>"
            "Values greater than 1 <em>accentuate</em> the shading effects of the displacement. "
            "<br/><br/>"
            "Values less than 1 <em>diminish</em> the shading effects of any displacement. "
            "The result of this can be used as a simple substitute for subsurface scattering effects. "
            "<br/><br/>"
            "Note: any time the shading normal doesn't match the geometry's normal "
            "(<strong>Bump Percent</strong> â‰  1), there is the possibility "
            "of artifacts in the shaded result - particularly when <strong>Bump Percent</strong> > 1. "
            "You've been warned. "
    ]],

    float Displacement_CoveringHeight = 0.0
    [[
        string page = "Displacement",
        string label = "Covering Height",
        int slider = 1, float slidermin = 0.0, float slidermax = 5.0, float slidercenter = 0.5,
        string help =
            "Sets the height (in <strong>Mag Space</strong>) of a uniformly displaced surface that's "
            "produced when this material is completely covered by an overlying material: i.e. when that "
            "material's <strong>Thickness</strong> = 1. "
            "<br/><br/>"
            "It is the height of a level surface that's intended to cover the peaks of this "
            "material's displacement. "
            "A good starting number is (0.25 + 0.5*Position)*(Magnitude), or, assuming Position=0, "
            "0.25*Magnitude. "
            "<br/><br/>"
            "If <strong>Covering Height</strong> is left at 0, the original geometric surface is used. "
    ]],

    string Displacement_MagSpace = "world"
    [[
        int connectable = 0,
        string page = "Displacement",
        string label = "Mag Space",
        string widget = "popup", int editable = 1,
        string options = "common|world|object",
        string help =
            "Selects the <strong>Space</strong> in which the Displacement <strong>Covering Height</strong> "
            "and Float and Vector <strong>Magnitude</strong> units are specified. "
    ]],

    float Displacement_MagScale = 1.0
    [[
        string page = "Displacement",
        string label = "Mag Scale",
        int slider = 1, float slidermin = 0.0, float slidermax = 10.0, float slidercenter = 1.0,
        string help =
            "An overall <strong>Scale</strong> applied to <em>all</em> the Input Float "
            "and Vector <strong>Magnitudes.</strong> "
    ]],

    // Float displacements.
    normal Displacement_Float_Nn = normal(0.0)
    [[
        string page = "Displacement.Float",
        string label = "Nn",
        string help =
            "Use this <em>common</em> space surface normal for the <strong>Float</strong> displacement "
            "directions. Defaults to the surface normal <strong>N</strong> if left un-connected. "
            "<br/><br/>"
            "Note: this <strong><em>must</em></strong> be connected to set it: "
            "<u>manually entering values will not work</u>. "
    ]],

    DISPLACE_FLOAT_UI_DECLARE(0),
    DISPLACE_FLOAT_UI_DECLARE(1),
    DISPLACE_FLOAT_UI_DECLARE(2),
    DISPLACE_FLOAT_UI_DECLARE(3),
    DISPLACE_FLOAT_UI_DECLARE(4),

    // Vector displacements.
    string Displacement_Vector_DirSpace = "Mag Space Value"
    [[
        int connectable = 0,
        string page = "Displacement.Vector",
        string label = "Dir Space",
        string widget = "popup", int editable = 1,
        string options = "Mag Space Value|common|world|object",
        string help =
            "The coordinate system in which the Vector <strong>Input</strong> <em>Directions</em> are specified. "
            "You may also enter the name of your own coordinate system. "
            "<br/><br/>"
            "Note: it is assumed the <strong>Input</strong> vectors have a maximum length of 1. "
            "<strong>Mag Space</strong> and <strong>Magnitude</strong> therefore determine their "
            "amount of displacement. "
            "<br/><br/>"
            "<strong>Dir Space</strong> however, specifies their orientation (direction): "
            "vector direction and magnitude are separate characteristics. "
    ]],

    DISPLACE_VECTOR_UI_DECLARE(0),
    DISPLACE_VECTOR_UI_DECLARE(1),
    DISPLACE_VECTOR_UI_DECLARE(2),
    DISPLACE_VECTOR_UI_DECLARE(3),
    DISPLACE_VECTOR_UI_DECLARE(4),

    // Utility socket.
    int Socket = 0
    [[
        string help =
            "Connect a shading node's <strong>Plug</strong> output here in order to execute that node and "
            "any shading tree connected to it. "
    ]],

    /*
     *  The Output Material data set.
     * 
     *  This consists of a vstruct parameter, a material struct parameter, and a set
     *  of enable parameters for each response. The material struct and response enable
     *  parameters are members of the vstruct parameter.
     */
    output PXRSURFACE_MATERIAL_VSTRUCT( MaterialOutput, Material Output,
            Connect this to a PxrSurface Material shader's <strong>Material Input</strong>
            to layer this OVER it.
            <br/><br/>
            If this is the last Material in the layer chain connect this to a
            <strong>PxrSurface_Material</strong> node.
            ),

    // The struct parameter.
    output PXRSURFACE_MATERIAL_STRUCT( MaterialOutput, MatOut ),

    // Set the output vstruct Enable parameters based on the input Enable value and user parameter settings.
    SET_ALL_ENABLE_PARAMS( MaterialOutput, MaterialInput, ClearCoat ),
    SET_ALL_ENABLE_PARAMS( MaterialOutput, MaterialInput, PrimarySpecular ),
    SET_ALL_ENABLE_PARAMS( MaterialOutput, MaterialInput, SecondarySpecular ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Iridescence ),
    SET_SHADINGNORMAL_ENABLE_PARAM( MaterialOutput, MaterialInput, Iridescence ),
    SET_ANISOTROPYDIRECTION_ENABLE_PARAM( MaterialOutput, MaterialInput, Iridescence ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Fuzz ),
    SET_SHADINGNORMAL_ENABLE_PARAM( MaterialOutput, MaterialInput, Fuzz ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Diffuse ),
    SET_SHADINGNORMAL_ENABLE_PARAM( MaterialOutput, MaterialInput, Diffuse ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Scatter ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Subsurface ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Glass ),
    SET_SHADINGNORMAL_ENABLE_PARAM( MaterialOutput, MaterialInput, Glass ),
    SET_ANISOTROPYDIRECTION_ENABLE_PARAM( MaterialOutput, MaterialInput, Glass ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Glow ),

    // This material's masks, as possibly modified by a pattern ramp.
    output float dispMask = 1.0 [[ string widget = "null" ]]
)
/*
 *  Material functionality: Output = Input OVER this.
 */
{
    // Pull on the Socket to make sure it's evaluated.
    MatOut.socket = Socket;

    // Bxdf data is passed through.
    MatOut = MatIn;

    // Short-circuit this material.
    if( Enable != 0 )
    {

    // Initialize this material's mask values.
    dispMask = Mask; // this_dispMask


    //
    //  Displacement.
    //
    vector  this_deltaP;
    vector  this_coverV;

    // The covering height surface offset vector for this material.
    // Nmag is common space direction with length relative to Mag Space.
    // Note: must use a normal transform to get the proper scale.
    normal  Nn = normalize(N);
    normal  Nmag = Nn * length( transform( "common", Displacement_MagSpace, Nn )); // normal

    this_coverV = Nmag * Displacement_CoveringHeight;

    // Float displacements.
    if( isconnected( Displacement_Float_Nn ))
    {
        Nn = Displacement_Float_Nn;
        Nmag = Nn * length( transform( "common", Displacement_MagSpace, Nn )); // normal
    }

    // Add float displacements to the deltaP displacement vector.
    float  floatDisp = DISPLACE_FLOAT_AMOUNT(0)
                + DISPLACE_FLOAT_AMOUNT(1)
                + DISPLACE_FLOAT_AMOUNT(2)
                + DISPLACE_FLOAT_AMOUNT(3)
                + DISPLACE_FLOAT_AMOUNT(4);

    this_deltaP = Nmag * floatDisp;

    // Vector displacements.
    // Magnitude and Direction are handled separately.
    string  directionSpace = ( Displacement_Vector_DirSpace != "Mag Space Value" )
                             ? Displacement_Vector_DirSpace : Displacement_MagSpace;

    // Add vector displacements to the deltaP displacement vector.
    vector  vectorDisp = DISPLACE_VECTOR_AMOUNT( 0, directionSpace, Displacement_MagSpace )
                + DISPLACE_VECTOR_AMOUNT( 1, directionSpace, Displacement_MagSpace )
                + DISPLACE_VECTOR_AMOUNT( 2, directionSpace, Displacement_MagSpace )
                + DISPLACE_VECTOR_AMOUNT( 3, directionSpace, Displacement_MagSpace )
                + DISPLACE_VECTOR_AMOUNT( 4, directionSpace, Displacement_MagSpace );

    this_deltaP += vectorDisp;

    // Globally scale the displacement. Displacement_MagScale is unitless.
    this_deltaP *= Displacement_MagScale;

    // Pre-multiply by the displacement mask.
    this_deltaP *= dispMask;
    this_coverV *= dispMask;

    // Note: coverV is not composited. It is only communicated
    // with the immediately overlying material layer.
    MatOut.coverV = this_coverV;

    // Displacement compositing.
    // Note: displacement is NOT Porter-Duff OVER operation composited.
    MatOut.deltaP = MatIn.deltaP + mix(
                                    this_deltaP,
                                    this_coverV,
                                    MatIn.thickness
                                    );

    // Thickness accumulates through all the layers, since layer displacements all accumulate.
    // Any overlying layer's thickness will apply to all layers below it, so always pass on the
    // largest thickness value.
    MatOut.thickness = max( MatIn.thickness, Displacement_Thickness*dispMask );

    // Handle BumpPercent. Just use dispMask - no need for all the bxdfMask controls.
    PARAM_OVER( MatOut, MatIn, Displacement, BumpPercent, dispMask );

    }
}
