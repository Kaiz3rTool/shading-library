/*
 *  Copyright 2018 Laika, LLC. Authored by Mitch Prater.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
/*
 *  This adapts the Material Output of a material shader to a
 *  displacement and its corresponding bxdf shader's parameters.
 */
#include "material/PxrSurface.h"
#include "material/PxrSurfaceAdapter.h"

shader PxrSurfaceAdapter
[[
    int rfm_nodeid = 1233882,
    string rfm_classification = "rendernode/RenderMan/pattern/Laika/osl/material",
    string label = "PxrSurface Adapter",
    string help = 
        "This connects the <strong>Material Output</strong> of an osl/material/PxrSurface "
        "to a displacement shader and a PxrSurface bxdf <strong>Input Material</strong> connection. "
]]
(
    string Notes = ""
    [[
        int connectable = 0,
        string help = 
            "This connects the <strong>Material Output</strong> of an osl/material/PxrSurface "
            "to a displacement shader and a PxrSurface bxdf <strong>Input Material</strong> connection. "
    ]],

    /*
     *  The input material.
     */
    int Material_Input = 0
    [[
        string label = "Material Input",
        string readOnly = "true",
        string tag = "Material_PxrSurface",
        string help =
            "Connect a PxrSurface Material shader's <strong>Material Output</strong> here. "
    ]],

    PXRSURFACE_MATERIAL_STRUCT( Material_Input, Params ),

    ALL_ENABLE_PARAMS( Material_Input, clearcoat ),
    ALL_ENABLE_PARAMS( Material_Input, specPrimary ),
    ALL_ENABLE_PARAMS( Material_Input, specSecondary ),
    RESPONSE_ENABLE_PARAM( Material_Input, iridescence ),
    SHADINGTANGENT_ENABLE_PARAM( Material_Input, iridescence ),
    RESPONSE_ENABLE_PARAM( Material_Input, fuzz ),
    SHADINGNORMAL_ENABLE_PARAM( Material_Input, fuzz ),
    RESPONSE_ENABLE_PARAM( Material_Input, diffuse ),
    SHADINGNORMAL_ENABLE_PARAM( Material_Input, diffuse ),
    RESPONSE_ENABLE_PARAM( Material_Input, scatter ),
    RESPONSE_ENABLE_PARAM( Material_Input, subsurface ),
    RESPONSE_ENABLE_PARAM( Material_Input, glass ),
    SHADINGTANGENT_ENABLE_PARAM( Material_Input, glass ),
    RESPONSE_ENABLE_PARAM( Material_Input, glow ),

    /*
     *  These inputs are connected to a GetPN node, and are used
     *  in the generation the displaced point and shading normals.
     *  They make the BumpPercent functionality possible.
     */
    point  Po = point(0.0),  // undisplaced: Po
    normal No = normal(0.0), // undisplaced: No


    /*
     *  This output Material vstruct is connected to a PxrSurface bxdf shader.
     */
    output float Material_Output = 0.0
    [[
        string label = "Material Output",
        string widget = "null",
        string tag = "vstruct",
        string help =
            "Connect this to a PxrSurface bxdf shader's Material Input. "
            "Note: this parameter is simply a dummy placeholder "
            "for the connection - its value is not used. "
    ]],

    /*
     *  Displaced P output.
     */
    output point out_P = point(0.0)
    [[
        string widget = "null",
        string tag = "point",
        string help =
            "This represents the displaced surface and is connected to a SetP displacement shader."
    ]],

    /*
     *  Utility Plug output.
     */
    output int Plug = 0 [[ string widget = "null" ]],

    /*
     *  Output PxrSurface (vstruct) shader parameters start here.
     */
    output normal globalShadingNormal = normal( 0.0 )
    [[
        string widget = "null",
        string vstructmember = "Material_Output.bumpNormal"
    ]],

    output color globalShadowColor = color( 0.0 )
    [[
        string widget = "null",
        string vstructmember = "Material_Output.shadowColor"
    ]],

    // clearcoat
    CLEARCOAT_OUTPUT_VSTRUCT( Material_Input, Material_Output, clearcoat ),

    // specPrimary
    SPECPRIMARY_OUTPUT_VSTRUCT( Material_Input, Material_Output, specPrimary ),

    // specSecondary
    SPECSECONDARY_OUTPUT_VSTRUCT( Material_Input, Material_Output, specSecondary ),

    // iridescence
    IRIDESCENCE_OUTPUT_VSTRUCT( Material_Input, Material_Output, iridescence ),

    // fuzz
    FUZZ_OUTPUT_VSTRUCT( Material_Input, Material_Output, fuzz ),

    // diffuse
    DIFFUSE_OUTPUT_VSTRUCT( Material_Input, Material_Output, diffuse ),

    // scatter
    SCATTER_OUTPUT_VSTRUCT( Material_Input, Material_Output, scatter ),

    // subsurface
    SUBSURFACE_OUTPUT_VSTRUCT( Material_Input, Material_Output, subsurface ),

    // scatter & subsurface
    output color ssIlluminationTint = color( 1.0 )
    [[
        string widget = "null",
        string vstructmember = "Material_Output.irradianceTint",
        string vstructConditionalExpr = "connect if "
                "Material_Input_scatterEnable == 1 or Material_Input_subsurfaceEnable == 1"
    ]],

    output float ssRoughness = 0.0
    [[
        string widget = "null",
        string vstructmember = "Material_Output.irradianceRoughness",
        string vstructConditionalExpr = "connect if "
                "Material_Input_scatterEnable == 1 or Material_Input_subsurfaceEnable == 1"
    ]],

    // glass
    GLASS_OUTPUT_VSTRUCT( Material_Input, Material_Output, glass ),

    // glow
    GLOW_OUTPUT_VSTRUCT( Material_Input, Material_Output, glow )
)
/*
 *  Adapter functionality.
 *  vstruct connections from the output parameters to the PxrSurface parameter vstructmembers
 *  are specified in the output parameter declarations.
 */
{
    //
    // Displacement.
    //
    out_P = Po + Material_Input_Params.deltaP;


    //
    //  Bxdf responses.
    //
    //  When enabled, simply copy the response's parameter values
    //  to their corresponding vstruct output parameters.
    //
    vector  defaultShadingTangent = normalize( dPdu );

    // When out_P has been connected to a displacement, N becomes the post-displacement normal.
    vector  deltaN = Material_Input_Params.BumpPercent * vector( N - No );
    normal  bumpShadingNormal = normalize( No + deltaN );

    // global Shading Normal -> PxrSurface BumpNormal.
    globalShadingNormal = normalize( mix(
                            bumpShadingNormal,
                            Material_Input_Params.globalShadingNormal,
                            Material_Input_Params.globalUseShadingNormal
                            ));

    COPY_PARAM( Material_Input_Params, global, ShadowColor );

    // clearcoat
    if( Material_Input_clearcoatEnable == 1 )
    {
        COPY_PARAM( Material_Input_Params, clearcoat, EdgeCG );
        COPY_PARAM( Material_Input_Params, clearcoat, FaceCG );
        COPY_PARAM( Material_Input_Params, clearcoat, FresnelExponent );
        COPY_PARAM( Material_Input_Params, clearcoat, RefractionCI );
        COPY_PARAM( Material_Input_Params, clearcoat, LayerThickness );
        COPY_PARAM( Material_Input_Params, clearcoat, LayerColor );
        COPY_PARAM( Material_Input_Params, clearcoat, Roughness );
        COPY_PARAM( Material_Input_Params, clearcoat, Anisotropy );

        clearcoatShadingNormal = normalize( mix(
                            globalShadingNormal,
                            Material_Input_Params.clearcoatShadingNormal,
                            Material_Input_Params.clearcoatUseShadingNormal
                            ));

        clearcoatShadingTangent = mix(
                            defaultShadingTangent,
                            Material_Input_Params.clearcoatShadingTangent,
                            Material_Input_Params.clearcoatUseShadingTangent
                            );
    }

    // specPrimary
    if( Material_Input_specPrimaryEnable == 1 )
    {
        COPY_PARAM( Material_Input_Params, specPrimary, EdgeCG );
        COPY_PARAM( Material_Input_Params, specPrimary, FaceCG );
        COPY_PARAM( Material_Input_Params, specPrimary, FresnelExponent );
        COPY_PARAM( Material_Input_Params, specPrimary, RefractionCI );
        COPY_PARAM( Material_Input_Params, specPrimary, ExtinctionCC );
        COPY_PARAM( Material_Input_Params, specPrimary, Roughness );
        COPY_PARAM( Material_Input_Params, specPrimary, Anisotropy );

        specPrimaryShadingNormal = normalize( mix(
                            globalShadingNormal,
                            Material_Input_Params.specPrimaryShadingNormal,
                            Material_Input_Params.specPrimaryUseShadingNormal
                            ));

        specPrimaryShadingTangent = mix(
                            defaultShadingTangent,
                            Material_Input_Params.specPrimaryShadingTangent,
                            Material_Input_Params.specPrimaryUseShadingTangent
                            );
    }

    // specSecondary
    if( Material_Input_specSecondaryEnable == 1 )
    {
        COPY_PARAM( Material_Input_Params, specSecondary, EdgeCG );
        COPY_PARAM( Material_Input_Params, specSecondary, FaceCG );
        COPY_PARAM( Material_Input_Params, specSecondary, FresnelExponent );
        COPY_PARAM( Material_Input_Params, specSecondary, RefractionCI );
        COPY_PARAM( Material_Input_Params, specSecondary, ExtinctionCC );
        COPY_PARAM( Material_Input_Params, specSecondary, Roughness );
        COPY_PARAM( Material_Input_Params, specSecondary, Anisotropy );

        specSecondaryShadingNormal = normalize( mix(
                            globalShadingNormal,
                            Material_Input_Params.specSecondaryShadingNormal,
                            Material_Input_Params.specSecondaryUseShadingNormal
                            ));

        specSecondaryShadingTangent = mix(
                            defaultShadingTangent,
                            Material_Input_Params.specSecondaryShadingTangent,
                            Material_Input_Params.specSecondaryUseShadingTangent
                            );
    }

    // iridescence
    if( Material_Input_iridescenceEnable == 1 )
    {
        iridescenceFaceGain = Material_Input_Params.iridescenceGain;
        iridescenceEdgeGain = Material_Input_Params.iridescenceGain;

        COPY_PARAM( Material_Input_Params, iridescence, FaceColor );
        COPY_PARAM( Material_Input_Params, iridescence, EdgeColor );
        COPY_PARAM( Material_Input_Params, iridescence, Exponent );
        COPY_PARAM( Material_Input_Params, iridescence, Repetitions );
        COPY_PARAM( Material_Input_Params, iridescence, Thickness );
        COPY_PARAM( Material_Input_Params, iridescence, Roughness );
        COPY_PARAM( Material_Input_Params, iridescence, Anisotropy );

        iridescenceShadingTangent = mix(
                            defaultShadingTangent,
                            Material_Input_Params.iridescenceShadingTangent,
                            Material_Input_Params.iridescenceUseShadingTangent
                            );
    }

    // fuzz
    if( Material_Input_fuzzEnable == 1 )
    {
        COPY_PARAM( Material_Input_Params, fuzz, CG );
        COPY_PARAM( Material_Input_Params, fuzz, ConeAngle );

        fuzzShadingNormal = normalize( mix(
                            globalShadingNormal,
                            Material_Input_Params.fuzzShadingNormal,
                            Material_Input_Params.fuzzUseShadingNormal
                            ));
    }

    // diffuse
    if( Material_Input_diffuseEnable == 1 )
    {
        COPY_PARAM( Material_Input_Params, diffuse, CG );
        COPY_PARAM( Material_Input_Params, diffuse, Roughness );
        COPY_PARAM( Material_Input_Params, diffuse, FalloffExponent );
        COPY_PARAM( Material_Input_Params, diffuse, BackfaceCG );
        COPY_PARAM( Material_Input_Params, diffuse, TransmitCG );

        diffuseShadingNormal = normalize( mix(
                            globalShadingNormal,
                            Material_Input_Params.diffuseShadingNormal,
                            Material_Input_Params.diffuseUseShadingNormal
                            ));
    }

    // scatter
    if( Material_Input_scatterEnable == 1 )
    {
        COPY_PARAM( Material_Input_Params, scatter, CG );
        COPY_PARAM( Material_Input_Params, scatter, PathLength );
        COPY_PARAM( Material_Input_Params, scatter, PathColor );
        COPY_PARAM( Material_Input_Params, scatter, Direction );
        COPY_PARAM( Material_Input_Params, scatter, Roughness );
        COPY_PARAM( Material_Input_Params, scatter, RefractionIndex );
        COPY_PARAM( Material_Input_Params, scatter, BacksideCG );
    }

    // subsurface
    if( Material_Input_subsurfaceEnable == 1 )
    {
        COPY_PARAM( Material_Input_Params, subsurface, CG );
        COPY_PARAM( Material_Input_Params, subsurface, PathLength );
        COPY_PARAM( Material_Input_Params, subsurface, PathColor );
        COPY_PARAM( Material_Input_Params, subsurface, PostTint );
        COPY_PARAM( Material_Input_Params, subsurface, TransmitGain );
        COPY_PARAM( Material_Input_Params, subsurface, ShortLength );
        COPY_PARAM( Material_Input_Params, subsurface, ShortCG );
        COPY_PARAM( Material_Input_Params, subsurface, LongLength );
        COPY_PARAM( Material_Input_Params, subsurface, LongCG );
        COPY_PARAM( Material_Input_Params, subsurface, Directionality );
        COPY_PARAM( Material_Input_Params, subsurface, DiffuseBlend );
        COPY_PARAM( Material_Input_Params, subsurface, Bleed );
    }

    // scatter & subsurface
    if( Material_Input_scatterEnable == 1 || Material_Input_subsurfaceEnable == 1 )
    {
        COPY_PARAM( Material_Input_Params, ss, IlluminationTint );
        COPY_PARAM( Material_Input_Params, ss, Roughness );
    }

    // glass
    if( Material_Input_glassEnable == 1 )
    {
        COPY_PARAM( Material_Input_Params, glass, ReflectionGain );
        COPY_PARAM( Material_Input_Params, glass, RefractionCG );
        COPY_PARAM( Material_Input_Params, glass, Roughness );
        COPY_PARAM( Material_Input_Params, glass, Anisotropy );

        // Can't allow glassIor to go below 1.0.
        glassRefractionIndex = max( 1.0, Material_Input_Params.glassRefractionIndex );

        glassShadingTangent = mix(
                            defaultShadingTangent,
                            Material_Input_Params.glassShadingTangent,
                            Material_Input_Params.glassUseShadingTangent
                            );
    }

    // glow
    if( Material_Input_glowEnable == 1 )
    {
        COPY_PARAM( Material_Input_Params, glow, CG );
    }
}
