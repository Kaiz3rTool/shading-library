/*
 *  Copyright 2018-2019 Laika, LLC. Authored by Mitch Prater.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
/*
 *  This adapts the Material Output of a material shader to a
 *  displacement and its corresponding bxdf shader's parameters:
 *  PxrSurface in this case.
 */
#include "ikaFunctions.h"

#include "material/v2_PxrSurface.h"
#include "material/v2_PxrSurfaceAdapter.h"

shader v2_PxrSurfaceAdapter
[[
    int rfm_nodeid = 1234033,
    string rfm_classification = "rendernode/RenderMan/pattern/material",
    string label = "PxrSurface Adapter",
    string help = 
        "This connects the <strong>Material Output</strong> of an osl/material/v2_PxrSurface "
        "to a displacement shader and a PxrSurface bxdf <strong>Input Material</strong> connection. "
]]
(
    string Notes = ""
    [[
        int connectable = 0,
        string help = 
            "This connects the <strong>Material Output</strong> of an osl/material/v2_PxrSurface "
            "to a displacement shader and a PxrSurface bxdf <strong>Input Material</strong> connection. "
    ]],

    /*
     *  The input material.
     */
    // The vstruct parameter. This is the single material connection point
    // for all the material parameters in the material struct.
    PXRSURFACE_MATERIAL_VSTRUCT( MaterialInput, Material Input,
            Connect a PxrSurface Material shader's <strong>Material Output</strong> here.
            ),

    // The struct parameter.
    PXRSURFACE_MATERIAL_STRUCT( MaterialInput, MatIn ),

    // The Enable parameters.
    ALL_ENABLE_PARAMS( MaterialInput, ClearCoat ),
    ALL_ENABLE_PARAMS( MaterialInput, PrimarySpecular ),
    ALL_ENABLE_PARAMS( MaterialInput, SecondarySpecular ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Iridescence ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Iridescence ),
    ANISOTROPYDIRECTION_ENABLE_PARAM( MaterialInput, Iridescence ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Fuzz ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Fuzz ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Diffuse ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Diffuse ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Scatter ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Subsurface ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Glass ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Glass ),
    ANISOTROPYDIRECTION_ENABLE_PARAM( MaterialInput, Glass ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Glow ),


    /*
     *  This output Material vstruct is connected to a PxrSurface bxdf shader.
     */
    output float MaterialOutput = 0.0
    [[
        string label = "Material Output",
        string widget = "null",
        string tag = "vstruct",
        string help =
            "Connect this to a PxrSurface bxdf shader's <strong>Material Input.</strong> "
    ]],

    /*
     *  Displaced P output.
     */
    output point out_P = point(0.0)
    [[
        string widget = "null",
        string tag = "point",
        string help =
            "This represents the displaced surface and is connected to a SetP displacement shader."
    ]],

    /*
     *  Composited Mask outputs.
     */
    output float  maxMask = 1.0 [[ string widget = "null" ]],
    output float  bxdfMask = 1.0 [[ string widget = "null" ]],
    output float  dispMask = 1.0 [[ string widget = "null" ]],

    /*
     *  Utility Plug output.
     */
    output int Plug = 0 [[ string widget = "null" ]],

    /*
     *  Output PxrSurface (vstruct) shader parameters start here.
     */
    output normal Global_ShadingNormal = normal( 0.0 )
    [[
        string widget = "null",
        string vstructmember = "MaterialOutput.bumpNormal"
    ]],

    output color Global_ShadowColor = color( 0.0 )
    [[
        string widget = "null",
        string vstructmember = "MaterialOutput.shadowColor"
    ]],

    // Clear Coat
    CLEARCOAT_OUTPUT_PARAMS( MaterialInput, MaterialOutput, ClearCoat ),

    // Primay Specular
    PRIMARYSPECULAR_OUTPUT_PARAMS( MaterialInput, MaterialOutput, PrimarySpecular ),

    // Secondary Specular
    SECONDARYSPECULAR_OUTPUT_PARAMS( MaterialInput, MaterialOutput, SecondarySpecular ),

    // Iridescence
    IRIDESCENCE_OUTPUT_PARAMS( MaterialInput, MaterialOutput, Iridescence ),

    // Fuzz
    FUZZ_OUTPUT_PARAMS( MaterialInput, MaterialOutput, Fuzz ),

    // Diffuse
    DIFFUSE_OUTPUT_PARAMS( MaterialInput, MaterialOutput, Diffuse ),

    // Scatter
    SCATTER_OUTPUT_PARAMS( MaterialInput, MaterialOutput, Scatter ),

    // Subsurface
    SUBSURFACE_OUTPUT_PARAMS( MaterialInput, MaterialOutput, Subsurface ),

    // Scatter & Subsurface
    output color ScatterAndSubsurface_IlluminationTint = color( 1.0 )
    [[
        string widget = "null",
        string vstructmember = "MaterialOutput.irradianceTint",
        string vstructConditionalExpr = "connect if "
                "MaterialInput_Scatter_Enable == 1 or MaterialInput_Subsurface_Enable == 1"
    ]],

    output float ScatterAndSubsurface_Roughness = 0.0
    [[
        string widget = "null",
        string vstructmember = "MaterialOutput.irradianceRoughness",
        string vstructConditionalExpr = "connect if "
                "MaterialInput_Scatter_Enable == 1 or MaterialInput_Subsurface_Enable == 1"
    ]],

    // Glass
    GLASS_OUTPUT_PARAMS( MaterialInput, MaterialOutput, Glass ),

    // Glow
    GLOW_OUTPUT_PARAMS( MaterialInput, MaterialOutput, Glow )
)
/*
 *  Adapter functionality.
 *  vstruct connections from the output parameters to the PxrSurface parameter vstructmembers
 *  are specified in the output parameter declarations.
 */
{
    Plug = MatIn.socket;
    maxMask = MatIn.maxMask;

    //
    // Displacement.
    //
    point  Po;
    getattribute( "builtin", "Po", Po );

    out_P = Po + MatIn.deltaP;
    dispMask = MatIn.dispMask;


    //
    //  Bxdf responses.
    //
    //  When enabled, simply copy the response's parameter values
    //  to their corresponding vstruct output parameters.
    //
    bxdfMask = MatIn.bxdfMask;

    // UVTangent default output.
    // When out_P has been connected to a displacement, Nn becomes the post-displacement normal.
    normal  Nn = normalize( N );
    vector  Tn, Bn;
    ikaCreateOrthonormalBasis( Nn, Tn, Bn );

    vector  defaultAnisotropyDirection = Tn;

    // Always the un-displaced normal.
    normal  Non;
    getattribute( "builtin", "Non", Non );

    vector  deltaN = MatIn.Displacement_BumpPercent * vector( Nn - Non );
    normal  bumpShadingNormal = normalize( Non + deltaN );

    // global Shading Normal -> PxrSurface BumpNormal.
    Global_ShadingNormal = normalize( mix(
                            bumpShadingNormal,
                            MatIn.Global_ShadingNormal,
                            MatIn.Global_UseShadingNormal
                            ));
    Global_ShadingNormal = ikaBumpCompensation( Global_ShadingNormal );

    // global ShadowColor -> PxrSurface ShadowColor.
    Global_ShadowColor = MatIn.Global_ShadowColor;

    // Clear Coat
    if( MaterialInput_ClearCoat_Enable )
    {
        COPY_PARAM( MatIn, ClearCoat, CG );
        COPY_PARAM( MatIn, ClearCoat, FaceCG );
        COPY_PARAM( MatIn, ClearCoat, FresnelExponent );
        COPY_PARAM( MatIn, ClearCoat, LayerThickness );
        COPY_PARAM( MatIn, ClearCoat, LayerColor );
        COPY_PARAM( MatIn, ClearCoat, Roughness );
        COPY_PARAM( MatIn, ClearCoat, Anisotropy );

        // Can't allow IOR to go below 1.
        ClearCoat_RefractionCI = ikaMax( 1.0, MatIn.ClearCoat_RefractionCI );

        ClearCoat_ShadingNormal = normalize( mix(
                            Global_ShadingNormal,
                            ikaBumpCompensation( MatIn.ClearCoat_ShadingNormal ),
                            MatIn.ClearCoat_UseShadingNormal
                            ));

        ClearCoat_AnisotropyDirection = mix(
                            defaultAnisotropyDirection,
                            MatIn.ClearCoat_AnisotropyDirection,
                            MatIn.ClearCoat_UseAnisotropyDirection
                            );
    }

    // Primary Specular
    if( MaterialInput_PrimarySpecular_Enable )
    {
        COPY_PARAM( MatIn, PrimarySpecular, CG );
        COPY_PARAM( MatIn, PrimarySpecular, FaceCG );
        COPY_PARAM( MatIn, PrimarySpecular, FresnelExponent );
        COPY_PARAM( MatIn, PrimarySpecular, ExtinctionCC );
        COPY_PARAM( MatIn, PrimarySpecular, Roughness );
        COPY_PARAM( MatIn, PrimarySpecular, Anisotropy );

        // Can't allow IOR to go below 1.
        PrimarySpecular_RefractionCI = ikaMax( 1.0, MatIn.PrimarySpecular_RefractionCI );

        PrimarySpecular_ShadingNormal = normalize( mix(
                            Global_ShadingNormal,
                            ikaBumpCompensation( MatIn.PrimarySpecular_ShadingNormal ),
                            MatIn.PrimarySpecular_UseShadingNormal
                            ));

        PrimarySpecular_AnisotropyDirection = mix(
                            defaultAnisotropyDirection,
                            MatIn.PrimarySpecular_AnisotropyDirection,
                            MatIn.PrimarySpecular_UseAnisotropyDirection
                            );
    }

    // Secondary Specular
    if( MaterialInput_SecondarySpecular_Enable )
    {
        COPY_PARAM( MatIn, SecondarySpecular, CG );
        COPY_PARAM( MatIn, SecondarySpecular, FaceCG );
        COPY_PARAM( MatIn, SecondarySpecular, FresnelExponent );
        COPY_PARAM( MatIn, SecondarySpecular, ExtinctionCC );
        COPY_PARAM( MatIn, SecondarySpecular, Roughness );
        COPY_PARAM( MatIn, SecondarySpecular, Anisotropy );

        // Can't allow IOR to go below 1.
        SecondarySpecular_RefractionCI = ikaMax( 1.0, MatIn.SecondarySpecular_RefractionCI );

        SecondarySpecular_ShadingNormal = normalize( mix(
                            Global_ShadingNormal,
                            ikaBumpCompensation( MatIn.SecondarySpecular_ShadingNormal ),
                            MatIn.SecondarySpecular_UseShadingNormal
                            ));

        SecondarySpecular_AnisotropyDirection = mix(
                            defaultAnisotropyDirection,
                            MatIn.SecondarySpecular_AnisotropyDirection,
                            MatIn.SecondarySpecular_UseAnisotropyDirection
                            );
    }

    // Iridescence
    if( MaterialInput_Iridescence_Enable )
    {
        Iridescence_FaceGain = MatIn.Iridescence_Gain;
        Iridescence_EdgeGain = MatIn.Iridescence_Gain;

        COPY_PARAM( MatIn, Iridescence, FaceColor );
        COPY_PARAM( MatIn, Iridescence, EdgeColor );
        COPY_PARAM( MatIn, Iridescence, Exponent );
        COPY_PARAM( MatIn, Iridescence, Repetitions );
        COPY_PARAM( MatIn, Iridescence, Thickness );
        COPY_PARAM( MatIn, Iridescence, Roughness );
        COPY_PARAM( MatIn, Iridescence, Anisotropy );

        Iridescence_ShadingNormal = normalize( mix(
                            Global_ShadingNormal,
                            MatIn.Iridescence_ShadingNormal,
                            MatIn.Iridescence_UseShadingNormal
                            ));

        Iridescence_AnisotropyDirection = mix(
                            defaultAnisotropyDirection,
                            MatIn.Iridescence_AnisotropyDirection,
                            MatIn.Iridescence_UseAnisotropyDirection
                            );
    }

    // Fuzz
    if( MaterialInput_Fuzz_Enable )
    {
        COPY_PARAM( MatIn, Fuzz, CG );
        COPY_PARAM( MatIn, Fuzz, ConeAngle );

        Fuzz_ShadingNormal = normalize( mix(
                            Global_ShadingNormal,
                            ikaBumpCompensation( MatIn.Fuzz_ShadingNormal ),
                            MatIn.Fuzz_UseShadingNormal
                            ));
    }

    // Diffuse
    if( MaterialInput_Diffuse_Enable )
    {
        COPY_PARAM( MatIn, Diffuse, CG );
        COPY_PARAM( MatIn, Diffuse, Roughness );
        COPY_PARAM( MatIn, Diffuse, Exponent );
        COPY_PARAM( MatIn, Diffuse, BackfaceCG );
        COPY_PARAM( MatIn, Diffuse, TransmitCG );

        Diffuse_ShadingNormal = normalize( mix(
                            Global_ShadingNormal,
                            ikaBumpCompensation( MatIn.Diffuse_ShadingNormal ),
                            MatIn.Diffuse_UseShadingNormal
                            ));
    }

    // Scatter
    if( MaterialInput_Scatter_Enable )
    {
        COPY_PARAM( MatIn, Scatter, CG );
        COPY_PARAM( MatIn, Scatter, PathLength );
        COPY_PARAM( MatIn, Scatter, PathColor );
        COPY_PARAM( MatIn, Scatter, Direction );
        COPY_PARAM( MatIn, Scatter, Roughness );
        COPY_PARAM( MatIn, Scatter, BacksideCG );

        // Can't allow IOR to go below 1.
        Scatter_RefractionIndex = max( 1.0, MatIn.Scatter_RefractionIndex );
    }

    // Subsurface
    if( MaterialInput_Subsurface_Enable )
    {
        COPY_PARAM( MatIn, Subsurface, CG );
        COPY_PARAM( MatIn, Subsurface, PathLength );
        COPY_PARAM( MatIn, Subsurface, PathColor );
        COPY_PARAM( MatIn, Subsurface, PostTint );
        COPY_PARAM( MatIn, Subsurface, TransmitGain );
        COPY_PARAM( MatIn, Subsurface, ShortLength );
        COPY_PARAM( MatIn, Subsurface, ShortCG );
        COPY_PARAM( MatIn, Subsurface, LongLength );
        COPY_PARAM( MatIn, Subsurface, LongCG );
        COPY_PARAM( MatIn, Subsurface, Directionality );
        COPY_PARAM( MatIn, Subsurface, DiffuseBlend );
        COPY_PARAM( MatIn, Subsurface, Bleed );
    }

    // Scatter & Subsurface
    if( MaterialInput_Scatter_Enable || MaterialInput_Subsurface_Enable )
    {
        COPY_PARAM( MatIn, ScatterAndSubsurface, IlluminationTint );
        COPY_PARAM( MatIn, ScatterAndSubsurface, Roughness );
    }

    // Glass
    if( MaterialInput_Glass_Enable )
    {
        COPY_PARAM( MatIn, Glass, ReflectionGain );
        COPY_PARAM( MatIn, Glass, Roughness );
        COPY_PARAM( MatIn, Glass, Anisotropy );
        COPY_PARAM( MatIn, Glass, RefractionCG );
        COPY_PARAM( MatIn, Glass, ManifoldExplorationIOR );

        /* No vstructmember for extinction parameter in PxrSurface.args */
        Glass_extinction = MatIn.Glass_ExtinctionCC;
        /* No vstructmember for ssAlbedo parameter in PxrSurface.args */
        Glass_ssAlbedo = MatIn.Glass_ScatterColor;

        Glass_ShadingNormal = normalize( mix(
                            Global_ShadingNormal,
                            ikaBumpCompensation( MatIn.Glass_ShadingNormal ),
                            MatIn.Glass_UseShadingNormal
                            ));

        Glass_AnisotropyDirection = mix(
                            defaultAnisotropyDirection,
                            MatIn.Glass_AnisotropyDirection,
                            MatIn.Glass_UseAnisotropyDirection
                            );

        // Can't allow GlassIor to go below 1.0.
        Glass_RefractionIndex = max( 1.0, MatIn.Glass_RefractionIndex );
    }

    // Glow
    if( MaterialInput_Glow_Enable )
    {
        COPY_PARAM( MatIn, Glow, CG );
    }
}
