/*
 *  Copyright 2018-2020 Laika, LLC. Authored by Mitch Prater.
 *
 *  Licensed under the Apache License Version 2.0 http://apache.org/licenses/LICENSE-2.0,
 *  or the MIT license http://opensource.org/licenses/MIT, at your option.
 *
 *  This program may not be copied, modified, or distributed except according to those terms.
 */
#include "material/v2_PxrSurface.h"

shader v2_PxrSurfaceModify
[[
    int rfm_nodeid = 1234052,
    string rfm_classification = "rendernode/RenderMan/pattern/material"
]]
(
    string Notes = ""
    [[
        int connectable = 0,
        string URL = "https://app.laika.com/intranet/vfx/shading/film6_shading_nodes/material",
        string help = 
            "<strong>Modifies</strong> the Diffuse and Specular responses of a "
            "<strong>material_v2_PxrSurface</strong>. "
    ]],

    /*
     *  The Input Material data set.
     *
     *  This consists of a vstruct parameter, a material struct parameter, and a set
     *  of enable parameters for each response. The material struct and response enable
     *  parameters are members of the vstruct parameter.
     */
    // The vstruct parameter. This is the single material connection point
    // for all the material parameters in the material struct.
    PXRSURFACE_MATERIAL_VSTRUCT( MaterialInput, Material Input,
            The <strong>Material</strong> whose responses will be <strong>Modified.</strong>
            ),

    // The material struct parameter.
    PXRSURFACE_MATERIAL_STRUCT( MaterialInput, MatIn ),

    // The response Enable parameters. These are linked to a vstructmember of the vstruct parameter.
    ALL_ENABLE_PARAMS( MaterialInput, ClearCoat ),
    ALL_ENABLE_PARAMS( MaterialInput, PrimarySpecular ),
    ALL_ENABLE_PARAMS( MaterialInput, SecondarySpecular ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Iridescence ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Iridescence ),
    ANISOTROPYDIRECTION_ENABLE_PARAM( MaterialInput, Iridescence ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Fuzz ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Fuzz ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Diffuse ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Diffuse ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Scatter ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Subsurface ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Glass ),
    SHADINGNORMAL_ENABLE_PARAM( MaterialInput, Glass ),
    ANISOTROPYDIRECTION_ENABLE_PARAM( MaterialInput, Glass ),
    RESPONSE_ENABLE_PARAM( MaterialInput, Glow ),

    /*
     *  This material's user interface parameters.
     */
    int Enable = 1
    [[
        int connectable = 0,
        string label = "Enable",
        string widget = "checkBox",
        string help =
            "Turns the modifications On/Off. "
    ]],

    float Mask = 1.0
    [[
        string label = "Mask",
        int slider = 1, float slidermin = 0.0, float slidermax = 1.0,
        string help =
            "Determines where the modifications will be applied. "
    ]],

    //
    //  Specular Modifications.
    //
    float SpecularHue = 0.0
    [[
        string page = "Specular",
        string label = "Hue",
        int slider = 1, float slidermin = -0.5, float slidermax = 0.5,
        string help = 
            "Shift the Hue by this amount. Hue is cyclical, so shifting by an integer "
            "amount causes no change. To invert the Hue, shift it by +/- .5. "
    ]],

    float SpecularSaturation = 1.0
    [[
        string page = "Specular",
        string label = "Saturation",
        int slider = 1, float slidermin = 0.0, float slidermax = 2.0,
        string help =
            "Scale the Saturation by this amount. "
    ]],

    float SpecularExposure = 0.0
    [[
        string page = "Specular",
        string label = "Exposure",
        int slider = 1, float slidermin = -4.0, float slidermax = 4.0,
        string help =
            "Adjust the Exposure by this amount. "
    ]],

    float SpecularGain = 1.0
    [[
        string page = "Specular",
        string label = "Gain",
        int slider = 1, float slidermin = 0.0, float slidermax = 2.0,
        string help =
            "Scale the Gain by this amount. "
    ]],

    color SpecularTint = color( 1.0 )
    [[
        string page = "Specular",
        string label = "Tint",
        string help =
            "Scale the color with this Tint. "
    ]],

    float SpecularRoughness = 0.0
    [[
        string page = "Specular",
        string label = "Roughness",
        int slider = 1, float slidermin = -1.0, float slidermax = 1.0,
        string help =
            "Modifies the material's Roughness values: "
            "<br/><br/>"
            "+ values increase Roughness. "
            "<br/>"
            "- values decrease Roughness. "
    ]],

    //
    //  Diffuse Modifications.
    //
    float DiffuseHue = 0.0
    [[
        string page = "Diffuse",
        string label = "Hue",
        int slider = 1, float slidermin = -0.5, float slidermax = 0.5,
        string help = 
            "Shift the Hue by this amount. Hue is cyclical, so shifting by an integer "
            "amount causes no change. To invert the Hue, shift it by +/- .5. "
    ]],

    float DiffuseSaturation = 1.0
    [[
        string page = "Diffuse",
        string label = "Saturation",
        int slider = 1, float slidermin = 0.0, float slidermax = 2.0,
        string help =
            "Scale the Saturation by this amount. "
    ]],

    float DiffuseExposure = 0.0
    [[
        string page = "Diffuse",
        string label = "Exposure",
        int slider = 1, float slidermin = -4.0, float slidermax = 4.0,
        string help =
            "Adjust the Exposure by this amount. "
    ]],

    float DiffuseGain = 1.0
    [[
        string page = "Diffuse",
        string label = "Gain",
        int slider = 1, float slidermin = 0.0, float slidermax = 2.0,
        string help =
            "Scale the Gain by this amount. "
    ]],

    color DiffuseTint = color( 1.0 )
    [[
        string page = "Diffuse",
        string label = "Tint",
        string help =
            "Scale the color with this Tint. "
    ]],

    //
    //  Utility socket.
    //
    int Socket = 0
    [[
        string help =
            "Connect a shading node's <strong>Plug</strong> output here in order to execute that node and "
            "any shading tree connected to it. "
    ]],

    /*
     *  The Output Material data set.
     * 
     *  This consists of a vstruct parameter, a material struct parameter, and a set
     *  of enable parameters for each response. The material struct and response enable
     *  parameters are members of the vstruct parameter.
     */
    output PXRSURFACE_MATERIAL_VSTRUCT( MaterialOutput, Material Output,
            The modified <strong>Material</strong>.
            ),

    // The struct parameter.
    output PXRSURFACE_MATERIAL_STRUCT( MaterialOutput, MatOut ),

    // Set the output vstruct Enable parameters based on the input Enable value and user parameter settings.
    SET_ALL_ENABLE_PARAMS( MaterialOutput, MaterialInput, ClearCoat ),
    SET_ALL_ENABLE_PARAMS( MaterialOutput, MaterialInput, PrimarySpecular ),
    SET_ALL_ENABLE_PARAMS( MaterialOutput, MaterialInput, SecondarySpecular ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Iridescence ),
    SET_SHADINGNORMAL_ENABLE_PARAM( MaterialOutput, MaterialInput, Iridescence ),
    SET_ANISOTROPYDIRECTION_ENABLE_PARAM( MaterialOutput, MaterialInput, Iridescence ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Fuzz ),
    SET_SHADINGNORMAL_ENABLE_PARAM( MaterialOutput, MaterialInput, Fuzz ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Diffuse ),
    SET_SHADINGNORMAL_ENABLE_PARAM( MaterialOutput, MaterialInput, Diffuse ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Scatter ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Subsurface ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Glass ),
    SET_SHADINGNORMAL_ENABLE_PARAM( MaterialOutput, MaterialInput, Glass ),
    SET_ANISOTROPYDIRECTION_ENABLE_PARAM( MaterialOutput, MaterialInput, Glass ),
    SET_RESPONSE_ENABLE_PARAM( MaterialOutput, MaterialInput, Glow )
)
{
    // Function Definitions.
    float  GainCorrect( float in, float Mask, float Expo, float Gain )
    {
        float  out = in;

        out *= pow( 2.0, Expo ) * Gain;

        return mix( in, out, Mask );
    }

    color  ColorCorrect( color in, float Mask, float Hue, float Sat, float Expo, float Gain, color Tint )
    {
        color  RGB = in;

        color  hsl = transformc( "rgb", "hsl", RGB );
        hsl[0] += Hue;
        hsl[1] *= Sat;
        RGB = transformc( "hsl", "rgb", hsl );

        RGB *= pow( 2.0, Expo ) * Gain * Tint;

        return mix( in, RGB, Mask );
    }

    float  RoughnessCorrect( float in, float Mask, float Rough )
    {
        float  r = mix(
                    mix( 0.0, 1.0 + Rough, in ),
                    mix( Rough, 1.0, in ),
                    step( 0.0, Rough )
                    );

        return clamp( r, 0.0, 1.0 );
    }


    // Output = Input.
    MatOut = MatIn;

    // Pull on the Socket to make sure it's evaluated.
    MatOut.socket = Socket;

    // Modify the Output material.
    if( Enable == 1 && Mask != 0.0 )
    {
        // ClearCoat.
        MatOut.ClearCoat_CG = ColorCorrect( MatOut.ClearCoat_CG, Mask,
                                            SpecularHue,
                                            SpecularSaturation,
                                            SpecularExposure,
                                            SpecularGain,
                                            SpecularTint
                                            );

        MatOut.ClearCoat_FaceCG = ColorCorrect( MatOut.ClearCoat_FaceCG, Mask,
                                            SpecularHue,
                                            SpecularSaturation,
                                            SpecularExposure,
                                            SpecularGain,
                                            SpecularTint
                                            );

        MatOut.ClearCoat_Roughness = RoughnessCorrect( MatOut.ClearCoat_Roughness, Mask,
                                            SpecularRoughness
                                            );

        // PrimarySpecular.
        MatOut.PrimarySpecular_CG = ColorCorrect( MatOut.PrimarySpecular_CG, Mask,
                                            SpecularHue,
                                            SpecularSaturation,
                                            SpecularExposure,
                                            SpecularGain,
                                            SpecularTint
                                            );

        MatOut.PrimarySpecular_FaceCG = ColorCorrect( MatOut.PrimarySpecular_FaceCG, Mask,
                                            SpecularHue,
                                            SpecularSaturation,
                                            SpecularExposure,
                                            SpecularGain,
                                            SpecularTint
                                            );

        MatOut.PrimarySpecular_Roughness = RoughnessCorrect( MatOut.PrimarySpecular_Roughness, Mask,
                                            SpecularRoughness
                                            );

        // SecondarySpecular.
        MatOut.SecondarySpecular_CG = ColorCorrect( MatOut.SecondarySpecular_CG, Mask,
                                            SpecularHue,
                                            SpecularSaturation,
                                            SpecularExposure,
                                            SpecularGain,
                                            SpecularTint
                                            );

        MatOut.SecondarySpecular_FaceCG = ColorCorrect( MatOut.SecondarySpecular_FaceCG, Mask,
                                            SpecularHue,
                                            SpecularSaturation,
                                            SpecularExposure,
                                            SpecularGain,
                                            SpecularTint
                                            );

        MatOut.SecondarySpecular_Roughness = RoughnessCorrect( MatOut.SecondarySpecular_Roughness, Mask,
                                            SpecularRoughness
                                            );

        // Iridescence.
        MatOut.Iridescence_FaceColor = ColorCorrect( MatOut.Iridescence_FaceColor, Mask,
                                            SpecularHue,
                                            SpecularSaturation,
                                            SpecularExposure,
                                            SpecularGain,
                                            SpecularTint
                                            );

        MatOut.Iridescence_EdgeColor = ColorCorrect( MatOut.Iridescence_EdgeColor, Mask,
                                            SpecularHue,
                                            SpecularSaturation,
                                            SpecularExposure,
                                            SpecularGain,
                                            SpecularTint
                                            );

        MatOut.Iridescence_Roughness = RoughnessCorrect( MatOut.Iridescence_Roughness, Mask,
                                            SpecularRoughness
                                            );

        // Glass.
        MatOut.Glass_ReflectionGain = GainCorrect( MatOut.Glass_ReflectionGain, Mask,
                                            SpecularExposure,
                                            SpecularGain
                                            );

        MatOut.Glass_RefractionCG = ColorCorrect( MatOut.Glass_RefractionCG, Mask,
                                            SpecularHue,
                                            SpecularSaturation,
                                            SpecularExposure,
                                            SpecularGain,
                                            SpecularTint
                                            );

        MatOut.Glass_Roughness = RoughnessCorrect( MatOut.Glass_Roughness, Mask,
                                            SpecularRoughness
                                            );

        // Fuzz.
        MatOut.Fuzz_CG = ColorCorrect( MatOut.Fuzz_CG, Mask,
                                            DiffuseHue,
                                            DiffuseSaturation,
                                            DiffuseExposure,
                                            DiffuseGain,
                                            DiffuseTint
                                            );

        // Diffuse.
        MatOut.Diffuse_CG = ColorCorrect( MatOut.Diffuse_CG, Mask,
                                            DiffuseHue,
                                            DiffuseSaturation,
                                            DiffuseExposure,
                                            DiffuseGain,
                                            DiffuseTint
                                            );

        MatOut.Diffuse_BackfaceCG = ColorCorrect( MatOut.Diffuse_BackfaceCG, Mask,
                                            DiffuseHue,
                                            DiffuseSaturation,
                                            DiffuseExposure,
                                            DiffuseGain,
                                            DiffuseTint
                                            );

        MatOut.Diffuse_TransmitCG = ColorCorrect( MatOut.Diffuse_TransmitCG, Mask,
                                            DiffuseHue,
                                            DiffuseSaturation,
                                            DiffuseExposure,
                                            DiffuseGain,
                                            DiffuseTint
                                            );

        // Scatter.
        MatOut.Scatter_CG = ColorCorrect( MatOut.Scatter_CG, Mask,
                                            DiffuseHue,
                                            DiffuseSaturation,
                                            DiffuseExposure,
                                            DiffuseGain,
                                            DiffuseTint
                                            );

        MatOut.Scatter_BacksideCG = ColorCorrect( MatOut.Scatter_BacksideCG, Mask,
                                            DiffuseHue,
                                            DiffuseSaturation,
                                            DiffuseExposure,
                                            DiffuseGain,
                                            DiffuseTint
                                            );

        // Subsurface.
        MatOut.Subsurface_Gain = GainCorrect( MatOut.Subsurface_Gain, Mask,
                                            DiffuseExposure,
                                            DiffuseGain
                                            );

        MatOut.Subsurface_ShortGain = GainCorrect( MatOut.Subsurface_ShortGain, Mask,
                                            DiffuseExposure,
                                            DiffuseGain
                                            );

        MatOut.Subsurface_LongGain = GainCorrect( MatOut.Subsurface_LongGain, Mask,
                                            DiffuseExposure,
                                            DiffuseGain
                                            );
    }
}
